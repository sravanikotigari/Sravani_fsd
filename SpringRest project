/**********************************************************************
 * Description: Module for CRUD operation using Restful Services
 * Author: Romu Tiwari
 * Created on: 29/01/2020
 * Employee id: 844549
 * ********************************************************************/

Product.java

package com.cts.controller;

public class Product {
	
	private int prodId;
	private String prodName;
	private int prodQuantity;
	private float prodPrice;
	
	// No Argument Constructor
	public Product() {
		
	}
	
	//Argument Constructor
	public Product(int prodId, String prodName, int prodQuantity, float prodPrice) {
	
		this.prodId = prodId;
		this.prodName = prodName;
		this.prodQuantity = prodQuantity;
		this.prodPrice = prodPrice;
	}

	
	//Getters and Setters
	public int getProdId() {
		return prodId;
	}
	public void setProdId(int prodId) {
		this.prodId = prodId;
	}
	public String getProdName() {
		return prodName;
	}
	public void setProdName(String prodName) {
		this.prodName = prodName;
	}
	public int getProdQuantity() {
		return prodQuantity;
	}
	public void setProdQuantity(int prodQuantity) {
		this.prodQuantity = prodQuantity;
	}
	public float getProdPrice() {
		return prodPrice;
	}
	public void setProdPrice(float prodPrice) {
		this.prodPrice = prodPrice;
	}

	//toString Method Overridden
	@Override
	public String toString() {
		return "Product [prodId=" + prodId + ", prodName=" + prodName + ", prodQuantity=" + prodQuantity
				+ ", prodPrice=" + prodPrice + "]";
	}
	
	
	
	

}



ProductDao.java



/**********************************************************************
 * Description: Module for CRUD operation using Restful Services
 * Author: Romu Tiwari
 * Created on: 29/01/2020
 * Employee id: 844549
 * ********************************************************************/

package com.cts.controller;

import java.sql.ResultSet;
import java.sql.SQLException;

import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
//import org.springframework.stereotype.Component;
import org.springframework.stereotype.Repository;

@Repository
public class ProductDao {

	@Autowired
	private DataSource ds;
	private JdbcTemplate jdbc;

	//Setter for JDBC Template
	/*
	 * public void setJdbc(JdbcTemplate jdbc) { this.jdbc = jdbc; }
	 */

	//Adding Product To Database
	public int addProduct(Product product){
		jdbc = new JdbcTemplate(ds);
		int storedStatus = jdbc.update("INSERT INTO product VALUES(?,?,?,?)", new Object[] {product.getProdId(),product.getProdName(),product.getProdQuantity(),product.getProdPrice()});
		System.out.println(storedStatus);
		return product.getProdId();
	}
	

	//Getting Product Details by ID
	public Product getById(int prodId) {
		jdbc = new JdbcTemplate(ds);
		String sql = "SELECT * FROM product WHERE prodId=?";
		Product product = (Product)jdbc.queryForObject(sql, new Object[] {prodId},

				new RowMapper<Product>() {
			
			@Override
			public Product mapRow(ResultSet rs, int rowNum) throws SQLException {

				Product product = new Product();

				product.setProdId(rs.getInt(1));
				product.setProdName(rs.getString(2));
				product.setProdQuantity(rs.getInt(3));
				product.setProdPrice(rs.getFloat(4));

				return product;
			}

		});
		return product;
	}
	

	//Delete Product by ID
	public int deleteProduct(int prodId) {
		jdbc = new JdbcTemplate(ds);
		int count = jdbc.update("DELETE FROM product WHERE prodId=?", new Object[] {prodId});
		return count;
	}
	
	
	//Update Product Details by ID
	public int updateProduct(Product product) {
		jdbc = new JdbcTemplate(ds);
		String sql = "UPDATE product SET prodName=?, prodQuantity=?, prodPrice=? WHERE prodId =?";
		int count = jdbc.update(sql,new Object[] 
				{product.getProdName(),product.getProdQuantity(),product.getProdPrice(),product.getProdId()});
		return count;
	}



}



ProductService.java



/**********************************************************************
 * Description: Module for CRUD operation using Restful Services
 * Author: Romu Tiwari
 * Created on: 29/01/2020
 * Employee id: 844549
 * ********************************************************************/

package com.cts.controller;

import org.springframework.beans.factory.annotation.Autowired;
//import org.springframework.stereotype.Component;
import org.springframework.stereotype.Service;

@Service
public class ProductService {
	
	@Autowired
	ProductDao pDao;
	
	//Adding Product
	public int addProduct(Product product) {
		
		return pDao.addProduct(product);
	}
	
	//Get By ID
	public Product getById(int prodId) {
		
		return pDao.getById(prodId);
	}
	
	//Delete Product
	public int deleteProduct(int prodId) {
		
		return pDao.deleteProduct(prodId);
	}
	
	//Update Product
	public int updateProduct(Product product) {
		
		return pDao.updateProduct(product);
	}

}






RestUI.java





/**********************************************************************
 * Description: Module for CRUD operation using Restful Services
 * Author: Romu Tiwari
 * Created on: 29/01/2020
 * Employee id: 844549
 * ********************************************************************/

package com.cts.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class RestUI {

	@Autowired
	ProductService pServ;

	//Adding Product 1
	@RequestMapping(value="/product",method=RequestMethod.POST,produces = "application/json")
	public ResponseEntity<Product> addProduct(@RequestBody Product product) {
		HttpHeaders headers = new HttpHeaders();
		if(product == null) {
			return new ResponseEntity<Product>(HttpStatus.BAD_REQUEST);
		}
		pServ.addProduct(product);		headers.add("Product Object Created -",String.valueOf(product.getProdId()));
		return new ResponseEntity<Product>(product,headers,HttpStatus.CREATED);
	}
	
	//Adding Product 2
	//	@RequestMapping(value="/product", method=RequestMethod.POST,produces="application/json")
	//	public int addProduct(@RequestBody Product product) {
	//		return pServ.addProduct(product);
	//	}
	

	//Get By ID
	@RequestMapping(value="/getbyid/{prodId}",method=RequestMethod.GET)
	public ResponseEntity<Product> getById(@PathVariable("prodId") int prodId) {
		Product product = pServ.getById(prodId);
		if(product == null) {
			return new ResponseEntity<Product>(HttpStatus.NOT_FOUND);
		}

		return new ResponseEntity<Product>(product,HttpStatus.OK);
	}
	

	//Delete by ID
	@RequestMapping(value="/delete/{prodId}",method = RequestMethod.DELETE)
	public ResponseEntity<Product> deleteProduct(@PathVariable("prodId") int prodId){
		HttpHeaders headers = new HttpHeaders();
		Product product = pServ.getById(prodId);
		if(product == null) {
			return new ResponseEntity<Product>(HttpStatus.NOT_FOUND);
		}
		pServ.deleteProduct(prodId);
		headers.add("Product Deleted - ", String.valueOf(prodId));
		return new ResponseEntity<Product>(product,headers,HttpStatus.NO_CONTENT);

	}
	

	//Update Product Details
	@RequestMapping(value="/update/{prodId}", method = RequestMethod.PUT)
	public ResponseEntity<Product> updateProduct(@PathVariable("prodId") int prodId, @RequestBody Product product){
		HttpHeaders headers = new HttpHeaders();
		Product isProduct = pServ.getById(prodId);
		if(isProduct == null) {
			return new ResponseEntity<Product>(HttpStatus.NOT_FOUND);
		}
		else if (product == null) {
			return new ResponseEntity<Product>(HttpStatus.BAD_REQUEST);
		}
		pServ.updateProduct(product);
		headers.add("Product Updated - ", String.valueOf(prodId));
		return new ResponseEntity<Product>(product,headers,HttpStatus.OK);
	}



}



dispatcher-servlet




<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/mvc
    http://www.springframework.org/schema/mvc/spring-mvc.xsd">

	<mvc:annotation-driven></mvc:annotation-driven>
	
	<context:annotation-config></context:annotation-config>
	
	<context:component-scan
		base-package="com.cts.controller"></context:component-scan>
		
	<bean id="ds" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName"
			value="com.mysql.cj.jdbc.Driver" />
		<!-- value="com.mysql.jdbc.Driver" /> -->
		<property name="url"
			value="jdbc:mysql://localhost:3306/project" />
		<property name="username" value="root" />
		<property name="password" value="root" />
		<property name="initialSize" value="2" />
		<property name="maxActive" value="5" />
	</bean>

	<!-- <bean id="viewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix">
			<value>/WEB-INF/views</value>
		</property>
		<property name="suffix">
			<value>.jsp</value>
		</property>
	</bean> -->
</beans>



web.xml




<!DOCTYPE web-app PUBLIC
 "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
 "http://java.sun.com/dtd/web-app_2_3.dtd" >
 
<web-app>
	<display-name>Archetype Created Web Application</display-name>
	<servlet>
		<servlet-name>dispatcher</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>dispatcher</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
</web-app>




pom.xml



<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.cts</groupId>
	<artifactId>SpringREST</artifactId>
	<packaging>war</packaging>
	<version>0.0.1-SNAPSHOT</version>
	<name>SpringREST Maven Webapp</name>
	<url>http://maven.apache.org</url>
	<properties>
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>
		<spring.version>4.3.18.RELEASE</spring.version>
	</properties>

	<dependencies>
		<!-- https://mvnrepository.com/artifact/jstl/jstl -->
		<dependency>
			<groupId>jstl</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>3.0.1</version>
			<scope>provided</scope>
		</dependency>

		<!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind -->
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>2.7.4</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.springframework/spring-web -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>3.8.1</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>commons-dbcp</groupId>
			<artifactId>commons-dbcp</artifactId>
			<version>1.4</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>8.0.15</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>${spring.version}</version>
		</dependency>
	</dependencies>
	<build>
		<finalName>SpringREST</finalName>
	</build>
</project>





